import React, { useMemo } from 'react';
import { type Player, type GameSummary } from './types';
import Avatar from './Avatar';

const PLAYER_COLORS = ['#2dd4bf', '#facc15', '#fb923c', '#a78bfa']; // teal, yellow, orange, purple

interface ScoreProgressionChartProps {
    gameHistory: GameSummary['gameHistory'];
    playerIds: string[];
    players: Player[];
    targetScore: number;
}

const ScoreProgressionChart: React.FC<ScoreProgressionChartProps> = ({ gameHistory, playerIds, players, targetScore }) => {

    const chartData = useMemo(() => {
        if (!gameHistory || gameHistory.length < 1) return [];

        return playerIds.map((playerId, index) => {
            const playerInfo = players.find(p => p.id === playerId);
            return {
                playerId,
                name: playerInfo?.name || 'Unknown',
                avatar: playerInfo?.avatar || '',
                color: PLAYER_COLORS[index % PLAYER_COLORS.length],
                data: gameHistory.map((state, turnIndex) => ({
                    turn: turnIndex,
                    score: state.scores[playerId] || 0,
                })),
            };
        });
    }, [gameHistory, playerIds, players]);
    
    if (chartData.length === 0 || gameHistory.length < 2) return null;

    const width = 500;
    const height = 250;
    const padding = { top: 20, right: 20, bottom: 60, left: 40 };

    const maxTurn = gameHistory.length - 1;
    const maxScore = Math.max(targetScore, ...gameHistory.flatMap(s => Object.values(s.scores)));

    const getX = (turn: number) => padding.left + (turn / maxTurn) * (width - padding.left - padding.right);
    const getY = (score: number) => height - padding.bottom - (score / maxScore) * (height - padding.top - padding.bottom);

    const pathData = (seriesData: { turn: number, score: number }[]) =>
        seriesData.map((d, i) => `${i === 0 ? 'M' : 'L'} ${getX(d.turn)} ${getY(d.score)}`).join(' ');

    return (
        <div className="bg-gray-900/50 rounded-lg p-4 w-full mt-6">
            <svg viewBox={`0 0 ${width} ${height}`} className="w-full h-auto" aria-label="Score Progression Chart">
                {/* Y-Axis Grid Lines & Labels */}
                {[0, 0.25, 0.5, 0.75, 1].map(tick => (
                    <g key={tick}>
                        <line
                            x1={padding.left} y1={getY(maxScore * tick)}
                            x2={width - padding.right} y2={getY(maxScore * tick)}
                            className="stroke-gray-700" strokeWidth="0.5" strokeDasharray="2"
                        />
                        <text
                            x={padding.left - 8} y={getY(maxScore * tick)}
                            dy="0.3em" textAnchor="end" className="text-xs fill-gray-400 font-mono"
                        >
                            {Math.round(maxScore * tick)}
                        </text>
                    </g>
                ))}
                
                {/* Target Score Line */}
                <line
                    x1={padding.left} y1={getY(targetScore)}
                    x2={width - padding.right} y2={getY(targetScore)}
                    className="stroke-red-500/50" strokeWidth="1" strokeDasharray="4"
                />

                {/* X-Axis Labels */}
                <text x={padding.left} y={height - padding.bottom + 15} textAnchor="start" className="text-xs fill-gray-400 font-mono">Turn 0</text>
                <text x={width - padding.right} y={height - padding.bottom + 15} textAnchor="end" className="text-xs fill-gray-400 font-mono">Turn {maxTurn}</text>


                {/* Data Paths */}
                {chartData.map(series => (
                    <path
                        key={series.playerId}
                        d={pathData(series.data)}
                        fill="none"
                        stroke={series.color}
                        strokeWidth="2.5"
                        strokeLinejoin="round"
                        strokeLinecap="round"
                    />
                ))}
                
                {/* Legend */}
                <g>
                    {chartData.map((series, index) => {
                        const legendItemWidth = (width - padding.left - padding.right) / chartData.length;
                        const xPos = padding.left + index * legendItemWidth;
                        const yPos = height - padding.bottom + 35;
                        return (
                            <g key={series.playerId} transform={`translate(${xPos}, ${yPos})`}>
                                <rect y="-5" width="12" height="12" fill={series.color} rx="3" />
                                <text x="18" className="text-xs fill-gray-300 truncate" width={legendItemWidth - 20}>{series.name}</text>
                            </g>
                        )
                    })}
                </g>
            </svg>
        </div>
    );
};

export default ScoreProgressionChart;
